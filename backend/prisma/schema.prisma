generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  email           String    @unique
  name            String
  jobTitle        String?
  profilePicture  String?   // URL to the user's profile picture
  role            UserRole  @default(USER)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  comments        Comment[]
  assignedTickets Ticket[]  @relation("AssignedTickets")
  tickets         Ticket[]  @relation("CreatedTickets")
  notifications   Notification[]
  notificationSettings NotificationSettings?
  aiInteractions  AIAssistantInteraction[]
  supportAssistantConversations SupportAssistantConversation[]
  aiTokenUsage    AITokenUsage[]
}

model Ticket {
  id             String         @id @default(cuid())
  title          String
  description    String
  device         String?
  additionalInfo String?
  status         TicketStatus   @default(OPEN)
  priority       Priority       @default(MEDIUM)
  responseFormat ResponseFormat @default(TEKSTI)
  aiSummary       String?      @db.Text
  userProfile    String?        // Add user profile field (e.g., student, teacher)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  processingStartedAt DateTime?
  processingEndedAt   DateTime?
  estimatedCompletionTime DateTime?
  createdById    String
  assignedToId   String?
  categoryId     String
  comments       Comment[]
  notifications  Notification[]
  attachments    Attachment[]
  assignedTo     User?          @relation("AssignedTickets", fields: [assignedToId], references: [id])
  category       Category       @relation(fields: [categoryId], references: [id])
  isAiGenerated  Boolean        @default(false)
  createdBy      User           @relation("CreatedTickets", fields: [createdById], references: [id])
  aiInteractions AIAssistantInteraction[]
  supportAssistantConversations SupportAssistantConversation[]
  aiTokenUsage    AITokenUsage[]
}

model Attachment {
  id        String   @id @default(uuid())
  filename  String
  path      String
  mimetype  String
  size      Int
  createdAt DateTime @default(now())
  ticketId  String
  ticket    Ticket   @relation(fields: [ticketId], references: [id])

  @@index([ticketId])
}

model Comment {
  id            String   @id @default(uuid())
  content       String
  mediaUrl      String?  // URL to the media file (image or video)
  mediaType     String?  // Type of media (image or video)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  ticketId      String
  authorId      String
  author        User     @relation(fields: [authorId], references: [id])
  ticket        Ticket   @relation(fields: [ticketId], references: [id])
  isAiGenerated Boolean  @default(false)
  evaluationResult String? // Stores the result from evaluateSolutionProgressWithLLM (EARLY, PROGRESSING, CLOSE, SOLVED)
  emotionalState String?  // For ModernChatAgent: frustrated, hopeful, excited, satisfied, confused
  reasoning     String?  // For ModernChatAgent: Internal reasoning about the evaluation (useful for analytics)
  shouldRevealHint Boolean @default(false) // For ModernChatAgent: Whether AI decided to give a hint

  @@index([ticketId])
  @@index([authorId])
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  tickets     Ticket[]
  knowledgeArticles KnowledgeArticle[]
  aiCategoryStats AIAssistantCategoryStat[]
}

enum UserRole {
  ADMIN
  USER
  SUPPORT
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ResponseFormat {
  TEKSTI
  KUVA
  VIDEO
}

enum NotificationType {
  TICKET_ASSIGNED
  COMMENT_ADDED
  STATUS_CHANGED
  PRIORITY_CHANGED
  MENTIONED
  DEADLINE_APPROACHING
}

model Notification {
  id        String           @id @default(uuid())
  type      NotificationType
  content   String
  read      Boolean         @default(false)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  userId    String
  ticketId  String?
  metadata  Json?           // For additional flexible data storage
  user      User            @relation(fields: [userId], references: [id])
  ticket    Ticket?         @relation(fields: [ticketId], references: [id])

  @@index([userId])
  @@index([ticketId])
}

model NotificationSettings {
  id                    String   @id @default(uuid())
  userId                String   @unique
  webNotifications     Boolean  @default(true)
  notifyOnAssigned     Boolean  @default(true)
  notifyOnStatusChange Boolean  @default(true)
  notifyOnComment      Boolean  @default(true)
  notifyOnPriority     Boolean  @default(true)
  notifyOnMention      Boolean  @default(true)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id])
}

model KnowledgeArticle {
  id            String   @id @default(uuid())
  title         String
  content       String   @db.Text
  categoryId    String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  relatedTicketIds String[]
  complexity    String?
  isAiGenerated Boolean  @default(false)
  category      Category @relation(fields: [categoryId], references: [id])
}

model AIAssistantInteraction {
  id              String   @id @default(uuid())
  ticketId        String?
  userId          String
  query           String
  response        String   @db.Text
  responseTime    Float    // in seconds
  rating          Int?     // 1-5 rating from user
  feedback        String?  // Optional feedback text
  createdAt       DateTime @default(now())
  
  user            User     @relation(fields: [userId], references: [id])
  ticket          Ticket?  @relation(fields: [ticketId], references: [id])
  
  @@index([ticketId])
  @@index([userId])
  @@index([createdAt])
}

model AIAssistantUsageStat {
  id              String   @id @default(uuid())
  date            DateTime @default(now()) @db.Date
  totalInteractions Int
  avgResponseTime Float    // in seconds
  avgRating       Float?   // average rating for that day
  totalTicketsAssisted Int
  
  @@unique([date])
}

model AIAssistantCategoryStat {
  id              String   @id @default(uuid())
  categoryId      String
  date            DateTime @default(now()) @db.Date
  interactionCount Int
  
  category        Category @relation(fields: [categoryId], references: [id])
  
  @@unique([categoryId, date])
  @@index([date])
}

model SupportAssistantConversation {
  id              String   @id @default(uuid())
  ticketId        String
  supportUserId   String
  conversationHistory String   @db.Text
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  ticket          Ticket   @relation(fields: [ticketId], references: [id])
  supportUser     User     @relation(fields: [supportUserId], references: [id])
  
  @@unique([ticketId, supportUserId])
  @@index([ticketId])
  @@index([supportUserId])
}

model AISettings {
  id                    String   @id @default(uuid())
  
  // ChatAgent Settings
  chatAgentVersion      String   @default("modern") // "modern" | "legacy"
  
  // Hint System Settings
  hintSystemEnabled     Boolean  @default(true)
  hintOnEarlyThreshold  Int      @default(3) // How many EARLY evaluations before hint
  hintOnProgressThreshold Int?   // How many PROGRESSING evaluations before hint (null = disabled)
  hintOnCloseThreshold  Int?     // How many CLOSE evaluations before hint (null = disabled)
  
  // Advanced Hint Settings
  hintCooldownTurns     Int      @default(0) // Minimum turns between hints (0 = no cooldown)
  hintMaxPerConversation Int     @default(999) // Maximum hints per conversation (999 = effectively unlimited)
  
  // Model Settings for each AI Agent
  chatAgentModel        String   @default("gpt-4.1") // Model for ChatAgent (both legacy and modern)
  supportAssistantModel String   @default("gpt-4o-mini") // Model for Support Assistant Widget
  ticketGeneratorModel  String   @default("gpt-4.1") // Model for Ticket Generator
  summarizerModel       String   @default("gpt-4.1") // Model for Summarizer
  
  // Metadata
  updatedBy             String?  // User ID who last updated settings
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // There should only be one AISettings record (singleton pattern)
  @@index([id])
}

model AITokenUsage {
  id                    String   @id @default(uuid())
  
  // Agent identification
  agentType             String   // "chat", "support", "generator", "summarizer"
  modelUsed             String   // The actual model used (e.g., "gpt-4o-mini")
  
  // Token counts
  promptTokens          Int      // Input tokens
  completionTokens      Int      // Output tokens
  totalTokens           Int      // Total tokens (prompt + completion)
  
  // Cost tracking (optional, can calculate based on model)
  estimatedCost         Float?   // Estimated cost in USD
  
  // Context information
  ticketId              String?  // Related ticket if applicable
  userId                String?  // User who triggered the AI call
  
  // Request metadata
  requestType           String?  // Type of request (e.g., "chat_response", "generate_ticket", etc.)
  success               Boolean  @default(true) // Whether the request was successful
  errorMessage          String?  // Error message if failed
  responseTime          Float?   // Response time in seconds
  
  // Timestamps
  createdAt             DateTime @default(now())
  
  // Relations
  ticket                Ticket?  @relation(fields: [ticketId], references: [id])
  user                  User?    @relation(fields: [userId], references: [id])
  
  @@index([agentType])
  @@index([createdAt])
  @@index([ticketId])
  @@index([userId])
  @@index([modelUsed])
}
