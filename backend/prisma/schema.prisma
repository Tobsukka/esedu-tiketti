generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  email           String    @unique
  name            String
  jobTitle        String?
  profilePicture  String?   // URL to the user's profile picture
  role            UserRole  @default(USER)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  comments        Comment[]
  assignedTickets Ticket[]  @relation("AssignedTickets")
  tickets         Ticket[]  @relation("CreatedTickets")
  notifications   Notification[]
  notificationSettings NotificationSettings?
}

model Ticket {
  id             String         @id @default(cuid())
  title          String
  description    String
  device         String?
  additionalInfo String?
  status         TicketStatus   @default(OPEN)
  priority       Priority       @default(MEDIUM)
  responseFormat ResponseFormat @default(TEKSTI)
  userProfile    String?        // Add user profile field (e.g., student, teacher)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  processingStartedAt DateTime?
  processingEndedAt   DateTime?
  estimatedCompletionTime DateTime?
  createdById    String
  assignedToId   String?
  categoryId     String
  comments       Comment[]
  notifications  Notification[]
  attachments    Attachment[]
  assignedTo     User?          @relation("AssignedTickets", fields: [assignedToId], references: [id])
  category       Category       @relation(fields: [categoryId], references: [id])
  isAiGenerated  Boolean        @default(false)
  createdBy      User           @relation("CreatedTickets", fields: [createdById], references: [id])
}

model Attachment {
  id        String   @id @default(uuid())
  filename  String
  path      String
  mimetype  String
  size      Int
  createdAt DateTime @default(now())
  ticketId  String
  ticket    Ticket   @relation(fields: [ticketId], references: [id])

  @@index([ticketId])
}

model Comment {
  id            String   @id @default(uuid())
  content       String
  mediaUrl      String?  // URL to the media file (image or video)
  mediaType     String?  // Type of media (image or video)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  ticketId      String
  authorId      String
  author        User     @relation(fields: [authorId], references: [id])
  ticket        Ticket   @relation(fields: [ticketId], references: [id])
  isAiGenerated Boolean  @default(false)
  evaluationResult String? // Stores the result from evaluateSolutionProgressWithLLM (EARLY, PROGRESSING, CLOSE, SOLVED)

  @@index([ticketId])
  @@index([authorId])
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  tickets     Ticket[]
  knowledgeArticles KnowledgeArticle[]
}

enum UserRole {
  ADMIN
  USER
  SUPPORT
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ResponseFormat {
  TEKSTI
  KUVA
  VIDEO
}

enum NotificationType {
  TICKET_ASSIGNED
  COMMENT_ADDED
  STATUS_CHANGED
  PRIORITY_CHANGED
  MENTIONED
  DEADLINE_APPROACHING
}

model Notification {
  id        String           @id @default(uuid())
  type      NotificationType
  content   String
  read      Boolean         @default(false)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  userId    String
  ticketId  String?
  metadata  Json?           // For additional flexible data storage
  user      User            @relation(fields: [userId], references: [id])
  ticket    Ticket?         @relation(fields: [ticketId], references: [id])

  @@index([userId])
  @@index([ticketId])
}

model NotificationSettings {
  id                    String   @id @default(uuid())
  userId                String   @unique
  emailNotifications    Boolean  @default(true)
  webNotifications     Boolean  @default(true)
  notifyOnAssigned     Boolean  @default(true)
  notifyOnStatusChange Boolean  @default(true)
  notifyOnComment      Boolean  @default(true)
  notifyOnPriority     Boolean  @default(true)
  notifyOnMention      Boolean  @default(true)
  notifyOnDeadline     Boolean  @default(true)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id])
}

model KnowledgeArticle {
  id            String   @id @default(uuid())
  title         String
  content       String   @db.Text
  categoryId    String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  relatedTicketIds String[]
  complexity    String?
  isAiGenerated Boolean  @default(false)
  category      Category @relation(fields: [categoryId], references: [id])
}
